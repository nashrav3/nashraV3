generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "clientExtensions"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  telegramId   BigInt   @unique @map("telegram_id")
  languageCode String?  @map("language_code")
  updatedAt    DateTime @updatedAt @map("updated_at")
  createdAt    DateTime @default(now()) @map("created_at")
  role         Role     @default(USER)

  @@map("users")
}

model people_copy {
  id          Int    @id
  city        String
  fam_no      String
  gr_mother   String
  mark        String
  p_birth     String
  p_case      String
  p_father    String
  p_first     String
  p_grand     String
  p_isudt     String
  p_job       String
  p_mother    String
  p_relation  String
  p_salary    String
  p_work      String
  rc_no       String
  seq_no      String
  soc         String
  ss_br_nm    String
  ss_br_no    String
  ss_id_no    String
  ss_lg_no    String
  ss_pg_no    String
  t_job       String
  full_name   String
  f_street    String
  rc_name     String
  f           String
  f_dist      String
  f_house     String
  f_area      String
  mother_name String

  @@index([fam_no, city], map: "idx_people_copy_filter")
  @@index([city, p_first, p_father, p_grand, p_birth(sort: Desc)], map: "idx_people_copy_filter_sort")
}

model city_counts {
  city     String
  p_first  String?
  p_father String?
  p_grand  String?
  count    Int
  id       Int     @id @default(autoincrement())

  @@index([p_first, p_father, p_grand])
}

model prs {
  per_id           Int     @id @default(autoincrement())
  per_famno        Int?
  per_first        String? @db.VarChar(15)
  per_father       String? @db.VarChar(15)
  per_grand        String? @db.VarChar(15)
  per_dob          String? @db.VarChar(10)
  per_dob2         Int?
  per_vrtype_2013  String  @db.VarChar(6)
  pcno             Int
  vrc_id           Int
  gov_mot_id       Int
  gov_name_ar      String  @db.VarChar(25)
  pc_name          String  @db.VarChar(70)
  pc_address       String  @db.VarChar(150)
  vrc_name_ar      String  @db.VarChar(35)
  vrc_address      String  @db.VarChar(100)
  vrc_oid          Int?
  psno             Int?
  voterseq         Int?
  cardserialnumber Int?
  votercard_status String  @db.VarChar(35)
  rigestered_case  String  @db.VarChar(35)
  new_card_status  String  @db.VarChar(35)

  @@index([per_famno, gov_mot_id], map: "idx_prs_famno_govmot")
}

model vrc {
  id       Int    @id @default(autoincrement())
  vrcno    Int
  vrc_name String @db.VarChar
  govno    Int
}

model vrc_idp {
  gov_mot_id           Int
  gov_name_ar          String @db.VarChar
  vrc_id               Int    @id
  vrc_name_ar          String @db.VarChar
  vrc_district_no      Int
  vrc_district_name    String @db.VarChar
  vrc_subdistrict_no   Int
  vrc_subdistrict_name String @db.VarChar
}

enum Role {
  USER
  ADMIN
  OWNER
}

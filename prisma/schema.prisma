generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "clientExtensions"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  chatId       BigInt    @id @unique @map("chat_id")
  name         String?
  chatType     ChatType  @map("chat_type")
  languageCode String?   @map("language_code")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  posts        Post[]
  bots         BotChat[]

  @@map("chats")
}

model Bot {
  botId             BigInt    @id @unique @map("bot_id")
  token             String    @unique
  username          String    @db.VarChar(255)
  firstName         String    @default("bot_name") @map("first_name") @db.VarChar(255) //longest name for a bot in nashrabot db is 206
  posts             Post[]
  postNumberCounter Int       @default(0) @map("post_number_counter")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  chats             BotChat[]

  @@map("bots")
}

model Post {
  postId       Int      @id @unique @default(autoincrement()) @map("post_id")
  postNumber   Int      @map("post_number")
  Chat         Chat     @relation(fields: [chatId], references: [chatId])
  chatId       BigInt   @map("chat_id")
  bot          Bot      @relation(fields: [botId], references: [botId])
  botId        BigInt   @map("bot_id")
  text         String?  @db.VarChar(4096)
  mediaGroupId String?  @map("media_group_id")
  fileId       String?  @map("file_id")
  type         PostType
  postOptions  Json?
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("posts")
}

model BotChat {
  id              Int      @id @unique @default(autoincrement())
  bot             Bot      @relation(fields: [botId], references: [botId])
  botId           BigInt   @map("bot_id")
  chat            Chat     @relation(fields: [chatId], references: [chatId], onUpdate: Cascade, onDelete: Cascade)
  chatId          BigInt   @map("chat_id")
  role            Role?
  deactivated     Boolean?
  botBlocked      Boolean? @map("bot_blocked")
  botKicked       Boolean? @map("bot_kicked")
  notFound        Boolean? @map("not_found")
  notMember       Boolean? @map("not_member")
  needAdminRights Boolean? @map("need_admin_rights")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdAt       DateTime @default(now()) @map("created_at")

  @@unique([botId, chatId])
  @@map("bot_chat")
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum ChatType {
  private
  group
  supergroup
  channel
}

enum ParseMode {
  MarkdownV2
  Markdown
  HTML
}

enum PostType {
  animation
  audio
  document
  photo
  sticker
  video
  video_note
  voice
  text
}
